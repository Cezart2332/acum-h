name: Security CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  NODE_VERSION: "20"
  DOTNET_VERSION: "9.0"
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: SAST Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      # CodeQL Analysis for JavaScript/TypeScript and C#
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, csharp
          queries: +security-and-quality

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Build projects for analysis
      - name: Build React Native App
        run: |
          npm ci
          npm run build --if-present

      - name: Build .NET Backend
        run: |
          cd backend/WebApplication1/WebApplication1
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript,csharp"

      # SonarQube Analysis
      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt

  # Dependency Security Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Node.js dependencies scan
      - name: Run npm audit
        run: |
          npm ci
          npm audit --audit-level high

      - name: Snyk Node.js scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      # .NET dependencies scan
      - name: .NET dependency scan
        run: |
          cd backend/WebApplication1/WebApplication1
          dotnet restore
          dotnet list package --vulnerable --include-transitive

      - name: Snyk .NET scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/WebApplication1/WebApplication1/WebApplication1.csproj

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "AcoomH"
          path: "."
          format: "ALL"
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: reports/

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd backend/WebApplication1/WebApplication1
          docker build -t acoomh-api:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "acoomh-api:latest"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Mobile App Security Testing
  mobile-security:
    name: Mobile App Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Check for hardcoded secrets
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # Mobile-specific security checks
      - name: Check for Android security issues
        run: |
          # Check for debug builds in production
          if grep -r "android:debuggable.*true" android/; then
            echo "‚ùå Debug mode enabled in Android manifest"
            exit 1
          fi

          # Check for cleartext traffic
          if grep -r "android:usesCleartextTraffic.*true" android/; then
            echo "‚ùå Cleartext traffic allowed"
            exit 1
          fi

          echo "‚úÖ Android security checks passed"

      - name: Check React Native security best practices
        run: |
          # Check for console.log in production code
          if grep -r "console\.(log\|warn\|error)" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
            echo "‚ö†Ô∏è  Console statements found - remove for production"
          fi

          # Check for hardcoded URLs
          if grep -r "http://" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
            echo "‚ùå HTTP URLs found - use HTTPS only"
            exit 1
          fi

          echo "‚úÖ React Native security checks passed"

  # Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Terraform/CloudFormation security scanning
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,cloudformation,dockerfile
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # Security Quality Gate
  security-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-security, mobile-security]
    if: always()

    steps:
      - name: Check security scan results
        run: |
          if [[ "${{ needs.sast-analysis.result }}" == "failure" ]]; then
            echo "‚ùå SAST analysis failed"
            exit 1
          fi

          if [[ "${{ needs.dependency-security.result }}" == "failure" ]]; then
            echo "‚ùå Dependency security scan failed"
            exit 1
          fi

          if [[ "${{ needs.mobile-security.result }}" == "failure" ]]; then
            echo "‚ùå Mobile security scan failed"
            exit 1
          fi

          echo "‚úÖ All security checks passed"

  # Deploy to staging (only if all security checks pass)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend to staging
        run: |
          echo "üöÄ Deploying backend to staging..."
          # Add your staging deployment commands here

      - name: Deploy mobile app to Expo staging channel
        run: |
          echo "üì± Publishing mobile app to staging..."
          # Add Expo publish commands here

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend to production
        run: |
          echo "üöÄ Deploying backend to production..."
          # Add your production deployment commands here

      - name: Deploy mobile app to production
        run: |
          echo "üì± Publishing mobile app to production..."
          # Add production deployment commands here

      - name: Notify security team
        run: |
          echo "üìß Notifying security team of production deployment..."
          # Add notification logic here
